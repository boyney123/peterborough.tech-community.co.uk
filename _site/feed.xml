<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peterborough.tech-community.co.uk</title>
    <description>Free and open source blog for IT professionals in Peterborough. Populated by anybody that has any kind of interest in IT.
We are always looking for contributors.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 03 Apr 2016 15:54:35 +0100</pubDate>
    <lastBuildDate>Sun, 03 Apr 2016 15:54:35 +0100</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>Mob Programming: Put down the pitchforks and pick up a keyboard</title>
        <description>&lt;p&gt;Together with my colleague &lt;a href=&quot;https://twitter.com/owennell&quot;&gt;Oli Wennell&lt;/a&gt;, I recently gave a talk at the BGL Technology Conference in Shoreditch, to communicate our team’s love of mob programming. &lt;a href=&quot;http://www.slideshare.net/NeilStudd1/mob-programming-put-down-the-pitchforks-and-pick-up-a-keyboard&quot;&gt;The slides are available online&lt;/a&gt; but there’s not a lot of context on there, so I’ve written this article to bring its message to a wider audience!&lt;/p&gt;

&lt;h2 id=&quot;the-challenges-that-we-all-face&quot;&gt;The challenges that we all face&lt;/h2&gt;

&lt;p&gt;When I’m working within agile teams, or talking to those who do, I often hear many of the same issues being raised repeatedly at retrospectives. Common recurring issues include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Information silos:&lt;/strong&gt; Specialist knowledge is known by only a few members of the team. We often express our desire to break down these silos by pairing and sharing, but inevitably when we’re up against tight deadlines (when are we not?), we fall-back to giving tasks to the person who knows the code best.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Too many meetings:&lt;/strong&gt; Even when we’re calling ourselves agile, we’re often drowning in meetings and ceremonies. There are story kick-off and review meetings, which often involve complex discussions around requirements and architecture, which everyone forgets as soon as they leave the room. The answer? More meetings!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Waiting for questions to be answered:&lt;/strong&gt; Once we’ve started to work on a task, inevitably we’ll reach a point where we need clarification from a key stakeholder. Depending on who this is, and which office (or timezone!) they’re working in, it may take hours (or even days) to get an answer. So we switch to a different task, and then switch back again once we get an answer, incurring context-switching penalties along the way. Wouldn’t it be nice if we could remove the need to have a long wait for answers?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testing and reviewing too late:&lt;/strong&gt; Many agile teams are actually working in a series of mini-waterfalls. Story kick-offs are the requirements-gathering session; then the developers implement the feature; then they throw it “over the wall” to the testers for verification. One of the key goals of agile is to have people of all disciplines working together at the same time, so it’s frustrating when a team devolves back to a production-line mentality.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Inconsistent coding practices:&lt;/strong&gt; Have you ever looked at a piece of code, and you’ve known who’s written it without even looking at the history or comments? Everybody has their own style, which creates inconsistency in the codebase, adding to the pile of technical debt that you’ll never have time to fix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From my experiences at &lt;a href=&quot;http://www.comparethemarket.com&quot;&gt;Compare The Market&lt;/a&gt;, I’ve found that all of these pain-points can be reduced greatly if you’re willing to embrace the power of mob programming.&lt;/p&gt;

&lt;h2 id=&quot;what-is-mob-programming&quot;&gt;What is mob programming?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://mobprogramming.org/&quot;&gt;Mob programming&lt;/a&gt; (often called mobbing for short) was invented by Woody Zuill, and has been described as “All the brilliant people working on the same thing, at the same time, in the same space, and on the same computer”. The first three parts of that sentence are already part of the core tenets of Agile; the addition of having everybody (e.g. developers, testers and business analysts) working on the same computer is its most noticeable difference.&lt;/p&gt;

&lt;p&gt;If you’re familiar with &lt;a href=&quot;https://en.wikipedia.org/wiki/Pair_programming&quot;&gt;pair programming&lt;/a&gt; then you’ll already know about the roles of the &lt;strong&gt;driver&lt;/strong&gt; (writing code at the keyboard) and the &lt;strong&gt;navigator&lt;/strong&gt; (offering guidance and review). Mobbing is basically the same, except there are many navigators, and you regularly rotate the person who’s the driver (for instance, every 15 minutes).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LoHGqfi.jpg&quot; alt=&quot;One of our mobs in action&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s essential to have a centrally-located monitor which anybody is capable of plugging-into or projecting onto. Ideally, everybody should have a similar setup: for example, equivalent Visual Studio / Resharper settings, the same keyboard shortcuts and environment settings, so that anybody can drive from anybody’s machine and have much the same experience.&lt;/p&gt;

&lt;p&gt;Critics of mob programming say that it’s inefficient and wasteful - with only one person writing code at a time, how can this possibly offer value? Well, there’s much more to programming than actually writing code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Analysing and clarifying requirements&lt;/li&gt;
  &lt;li&gt;Deciding how you’re going to solve a problem&lt;/li&gt;
  &lt;li&gt;Making architectural decisions&lt;/li&gt;
  &lt;li&gt;Creating examples/scenarios to drive a TDD approach&lt;/li&gt;
  &lt;li&gt;Implementing a simple “walking skeleton” version&lt;/li&gt;
  &lt;li&gt;Deciding on whether your first approach is fit-for-purpose&lt;/li&gt;
  &lt;li&gt;Agreeing what should be refactored&lt;/li&gt;
  &lt;li&gt;Reviewing the solution with stakeholders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These activities require very little writing of code; however, they all require a lot of discussions between people of different disciplines. When you’re working in a mob environment, all of those people are already in the same place, allowing for faster decision-making and developing a group consensus in the moment.&lt;/p&gt;

&lt;h2 id=&quot;how-does-mobbing-help&quot;&gt;How does mobbing help?&lt;/h2&gt;

&lt;p&gt;There are a number of notable benefits to adopting a mob programming approach. In no particular order, here’s a few of them - each person will probably have their own favourite, depending on which is causing them the most pain at the moment!&lt;/p&gt;

&lt;p&gt;Mobbing removes the pain and stress of code reviews, as all of the code is being reviewed as it’s written. You’ll also experience an equivalent boost in code consistency, as the group gradually adopts a common approach on often-contentious subjects such as indentations and linebreaks.&lt;/p&gt;

&lt;p&gt;It’s not just code quality which improves; the constant review process means that discussion and debate occurs at the moment when the work is fresh in the group’s mind, rather than those annoying “What were we thinking?” conversations which might otherwise happen weeks later.&lt;/p&gt;

&lt;p&gt;With everybody working on the same code at the same time, knowledge sharing becomes a natural by-product of the mobbing process. This makes mobbing particularly useful for “spikes” and other work which will be the foundation of future user stories, because it means that anybody can pick up the next user story and already have a grounding in what’s been done.&lt;/p&gt;

&lt;p&gt;Mob programming is also an incredibly inclusive process, open to people of varying disciplines. It’s a great learning environment - “learning by doing” is often the most efficient way to gain knowledge, and for would-be developers (like myself, a tester by trade) it’s allowed me to write production code in a safe environment with the support of my colleagues, and I’ve picked up more skills than I would’ve done by reading textbooks.&lt;/p&gt;

&lt;h2 id=&quot;watch-out-for-potential-pitfalls&quot;&gt;Watch out for potential pitfalls&lt;/h2&gt;

&lt;p&gt;Before you run off to try mob programming for yourself, here are a few lessons that we’ve learned through our mobbing activities. Arm yourselves with these, and you’ll have a very good chance of success!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Not every task is suited to mobbing:&lt;/strong&gt; You don’t need a large group of navigators to help you with your timesheet, or to complete mundane, prescriptive tasks. That’s OK - we’re not saying that mob programming is the only way of working. When we start a user story, we evaluate whether it might be appropriate to mob on it. If it’s not, then we don’t!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t be afraid to split the mob:&lt;/strong&gt; Once you’ve started mobbing, don’t feel that you’re locked-in to this way of working. If it turns out that the task isn’t going anywhere, break away until you feel ready to progress. Speaking of which…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Beware of rabbit holes:&lt;/strong&gt; If you’re working on your own, burning 10 minutes on an unrelated investigation might not be a big deal, but if you’ve got 6-7 people in that rabbit hole with you, that investigation has effectively burned over an hour of the team’s time. Try keeping a sidebar or a “To Do” list, to allow you to stay focused on the current activity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t make one person drive for too long:&lt;/strong&gt; Just like in a car, driving is an intense activity which requires immense concentration, and if you try to do it for too long then you’re going to become prone to mistakes and headaches! Rotate the driver regularly, by either using a timer or rotating whenever you get to a natural changeover point (e.g. all of the tests are passing).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Support the driver:&lt;/strong&gt; Just because the driver is front and centre, it doesn’t mean that the navigators get to switch off. They are the eyes and ears of the group, staying heads-up to guide the driver, and doing whatever is necessary to allow them to stay focused on the keyboard. It’s not a time for going off to meetings, or to get into a lengthy email discussion. You might be missing an important bit of discussion, and before you know it, you’re going to be at the keyboard again.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mobbing requires trust:&lt;/strong&gt; Having somebody watching you code can be a stressful experience. How many more mistakes or typos do you make when there’s someone looking over your shoulder? Scale that up to multiple navigators watching you, and you’ll need to ensure that you have a safe, trusting environment which allows every team member to be in the limelight without fear of reproach.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You can’t force a team to work like this:&lt;/strong&gt; Everything we’ve discussed above - trust, openness and freedom of communication - comes with time. Newly-formed teams, or new employees being dropped into an existing team, will need to learn each other’s boundaries, so that they are comfortable discussing and debating with each other. Don’t throw the entire team in at the deep end: run smaller mobbing experiments to begin with, and run frequent retrospectives, to learn what is (or isn’t) working for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-stopping-you&quot;&gt;What’s stopping you?&lt;/h2&gt;

&lt;p&gt;It’s easy to get started with mob programming. All you need is a large enough desk, with a good-sized monitor that everybody can see. Then it’s just a case of trying it, and finding out whether it works for you.&lt;/p&gt;

&lt;p&gt;We’ve seen that it can be more productive, in the right situations - maybe it will work for you too. Contact myself or Oli if you’d like any tips or assistance on your mobbing adventure!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/neilstudd&quot;&gt;Contact Neil via Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/owennell&quot;&gt;Contact Oli via Twitter&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Apr 2016 09:00:00 +0100</pubDate>
        <link>http://yourdomain.com/tech/2016/04/02/neil-oli-mob-programming.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/04/02/neil-oli-mob-programming.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>A new world for testers</title>
        <description>&lt;p&gt;The past few years has seen a marked change in the typical job role for a software tester. Testers are now working much more closely with developers, with a corresponding need to improve their technical skillset, much more so than many other areas of IT. The testing sphere is almost unrecognisable from when I first started working in QA in 2004, and those who aren’t keeping pace with the change could find their opportunities very limited in the future.&lt;/p&gt;

&lt;h2 id=&quot;why-the-change&quot;&gt;Why the change?&lt;/h2&gt;

&lt;p&gt;In the beginning (or at least for as long as agile practitioners have needed something to beat their stick against), there was waterfall. I’ve worked in organisations which have been working in waterfall-like structures, with gated processes at each stage of development, before finally throwing the code “over the wall” for the testers to validate.&lt;/p&gt;

&lt;p&gt;Very few people would argue that the rapid rise of agile has been a bad thing for quality. Personally, I find that working alongside developers (and even writing code myself) is massively rewarding. However, it can be challenging for a lot of testers, who - for all of agile’s benefits - liked living in the comfort zone of having a validation phase. Requirements were provided clearly up-front; there was plenty of time to extrapolate test cases to validate the requirements into cosy Excel test scripts; and when an issue was encountered during test, the requirements were a non-controversial oracle which they could use to decide if something had passed or failed.&lt;/p&gt;

&lt;p&gt;Because of this, many testers are resistant to change, to the extent that they’re jeopardising their own future career chances, and also holding-back the potential of their current testing team. This is not out of malice, but out of fear, and I’d like to banish a few of those fears with a few simple pieces of advice.&lt;/p&gt;

&lt;h2 id=&quot;the-grass-really-is-greener-on-the-other-side&quot;&gt;The grass really IS greener on the other side&lt;/h2&gt;

&lt;p&gt;Getting outside your comfort zone can be a real challenge. Often we feel that we’re doing it in blind faith, simply because someone has told us that things will be better on the other side. Here’s a practical example: I can’t swim. I never learnt as a child. As an adult, I know that if I want to learn, all I need to do is take some lessons; yet I’m plagued by fears (What if I can’t do it? Won’t I look stupid flailing around?) and doubts (Will life really be better if I succeed? Can’t I just stay in the shallow water?)&lt;/p&gt;

&lt;p&gt;Maybe I simply need a mentor, somebody to guide me through. In which case, I hope this article can serve as a similar reassuring hand for uncertain testers. I’ve been living in the new world of testing for a number of years now, and I can tell you that it’s well worth the effort to upskill yourself.&lt;/p&gt;

&lt;p&gt;When I worked in waterfall environments, I used to be very protective of my test scripts; I didn’t want the developers to see them, because then they might write code to catch the pesky edge-case that I’d thought of, and I wouldn’t get to log a bug! In hindsight, this was clearly foolish - it’s far more efficient to work closely with developers, at the point when they’re writing that potentially-flawed line of code, to catch that bug before it’s ever introduced.&lt;/p&gt;

&lt;p&gt;Similarly, I used to be very protective of my role boundaries. I was the tester; testing was my job! If anybody without “test” in their job title tried to undertake a testing activity, I would slap them down, just as I would’ve expected to have been slapped-down if I tried to write some production code. Yet nowadays, I can see the benefits of having much more fluid role boundaries. At Compare The Market, I still have “test” within my job title, but that’s more because testing is my speciality; the whole team is responsible for quality (where I get to offer a guiding hand to what that quality level should be), and I’m now able to participate in a more diverse range of activities, including writing code within pair-programming or mob programming environments.&lt;/p&gt;

&lt;p&gt;I’m amazed how far I’ve come, and how quickly. Which brings me on to my next point…&lt;/p&gt;

&lt;h2 id=&quot;the-learning-curve-isnt-as-steep-as-you-think&quot;&gt;The learning curve isn’t as steep as you think&lt;/h2&gt;

&lt;p&gt;Gone are the days when you needed to buy an impenetrable 600-page book before you had any chance of learning a language. Heck, you don’t even necessarily need to talk to any “real” people in order to progress your learning. There’s a vast array of tutorials and resources online, if you know where to find them.&lt;/p&gt;

&lt;p&gt;Sites like &lt;a href=&quot;https://www.codecademy.com&quot;&gt;Codecademy&lt;/a&gt;, &lt;a href=&quot;http://www.codeschool.com&quot;&gt;Code School&lt;/a&gt; and &lt;a href=&quot;https://www.coursera.org&quot;&gt;Coursera&lt;/a&gt; have a vast array of self-paced tutorials which can quickly take you from novice to adept. Then there’s &lt;a href=&quot;https://www.pluralsight.com&quot;&gt;Pluralsight&lt;/a&gt;, a subscription-based learning service which you may unknowingly already have free access to - Microsoft are currently bundling a free Pluralsight subscription with many of their Visual Studio licensing packages.&lt;/p&gt;

&lt;p&gt;It’s good to set aside a little time each week (or even each day) to undertake a lesson or two. And don’t think that you have to do all of this in your free time; your employer has a commitment to enabling your professional development, so hopefully they will spare you some hours each week to pursue this within the office.&lt;/p&gt;

&lt;h2 id=&quot;strength-in-numbers&quot;&gt;Strength in numbers&lt;/h2&gt;

&lt;p&gt;If you have several colleagues who all want to learn a particular language, it can be massively beneficial if you all follow along with the same material, as you’ll be able to discuss tips and tricks as you learn. When I was studying C#, I did so with a colleague - we each dedicated two hours on a Wednesday afternoon to complete the same set of exercises. Once we’d completed them, we’d swap code and compare our solutions, which would often give us extra insight (sometimes her approach was more elegant than mine, and vice-versa).&lt;/p&gt;

&lt;p&gt;You can scale this up even further by participating in mass group activities. Coding dojos and katas (such as those organised by &lt;a href=&quot;http://www.meetup.com/Agile-Peterborough/&quot;&gt;Agile Peterborough&lt;/a&gt; are a great way of learning within a group. If you’d rather do something from the comfort of your own home, I’m an organiser for &lt;a href=&quot;http://www.weekendtesting.com&quot;&gt;Weekend Testing&lt;/a&gt;, which runs free monthly sessions over Skype for groups of 20-30 testers where we discuss techniques and undertake practical exercises.&lt;/p&gt;

&lt;p&gt;By following these tips, I hope you can begin to plot your path to a brighter testing future!&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Mar 2016 08:00:00 +0000</pubDate>
        <link>http://yourdomain.com/tech/2016/03/11/neil-new-world-for-testers.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/03/11/neil-new-world-for-testers.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Why autonomy is so important for individuals, teams and companies</title>
        <description>&lt;p&gt;&lt;em&gt;Blog from my website http://www.davidboyne.co.uk&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I recently came across &lt;a href=&quot;http://mikehadlow.blogspot.co.il/2014/06/heisenberg-developers.html&quot;&gt;a thought provoking blog from Mike Hadlow&lt;/a&gt; which got me thinking about the importance of autonomy in teams and what it means for developers. In this post I will share from experience how autonomy can lead to motivated, self organising and passionate teams, and how dangerous things can get if teams don’t have it or it’s taken away from them.&lt;/p&gt;

&lt;h2 id=&quot;teams&quot;&gt;Teams&lt;/h2&gt;
&lt;p&gt;I have been writing software for awhile now and over the course of my career I have worked with teams that are motivated, self driven and passionate. Teams that were motivated, self driven and passionate but lost it all over time and teams that never had it. Which most of the time is due to a lack of autonomy in the team and traditional management methodologies.&lt;/p&gt;

&lt;p&gt;In short (in my opinion), traditional management consists of a hierarchy. We have a boss, the boss tells us what to do and we do it, and their boss tells them what to do (and so on). This style of management has worked for many years (and continues too), but recently I feel we are all learning that this isn’t necessary the best way to manage software teams especially developers. We have to evolve.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“…developers become disengaged, unmotivated and bored and eventually move on….”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software development is a creative process and requires a lot of brain stimulation. All members of the team are creative in way one or another but for some reason software developers sometimes have the persona of just being code monkeys (build what I say and do as I say).&lt;/p&gt;

&lt;p&gt;Now some developers that just want the paycheck don’t mind this attitude, but the developers that are passionate, self driven and motivated hate it.&lt;/p&gt;

&lt;p&gt;When this happens developers become &lt;strong&gt;disengaged&lt;/strong&gt;, &lt;strong&gt;unmotivated&lt;/strong&gt; and &lt;strong&gt;bored&lt;/strong&gt; and eventually move on.&lt;/p&gt;

&lt;p&gt;But what I have learnt is if we give individuals and teams more autonomy on what they do and how they do it they all get an increase in &lt;strong&gt;engagement&lt;/strong&gt;, &lt;strong&gt;motivation&lt;/strong&gt; and &lt;strong&gt;passion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Teams that a more driven, motivated and passionate will &lt;strong&gt;always&lt;/strong&gt; outperform teams that are not.&lt;/p&gt;

&lt;h2 id=&quot;autonomy-leads-to-a-better-outcomes-for-everybody&quot;&gt;Autonomy leads to a better outcomes for everybody&lt;/h2&gt;

&lt;p&gt;In the past teams and individuals I have worked with that have more autonomy with their life and job tend to be more motivated and driven. Leading to quality software, high motivated individuals and self driven teams. &lt;strong&gt;Teams that actually care about what they do.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whereas teams with a lack of autonomy become disengaged, lose interest and motivation, leading to messy code, technical debt and attitudes where team members &lt;strong&gt;don’t necessarily care about what they do&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When we look at successful technology companies and try to understand how they are so successful, it normally comes down to &lt;strong&gt;culture&lt;/strong&gt; and individuals/teams with drive, passion and motivation.&lt;/p&gt;

&lt;h2 id=&quot;what-does-it-all-come-down-too&quot;&gt;What does it all come down too?&lt;/h2&gt;

&lt;p&gt;I think it comes down to one thing. &lt;strong&gt;Trust&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I think software craftsmanship lives in an age where old traditional management no longer works.&lt;/p&gt;

&lt;p&gt;If you really want high performing motivated people and teams we need to learn how to give anatomy to them. I’m not saying just let teams decide what to do and when to do it, but guide them into decisions and work &lt;strong&gt;together&lt;/strong&gt; to path the future.&lt;/p&gt;

&lt;p&gt;Traditional management methods still work today, it’s why they have been around for so long, but if you want to create an atmosphere where individuals and teams are driven, motivated and passionate giving autonomy to teams &lt;strong&gt;will&lt;/strong&gt; provide this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoyed reading this I recommend you read the &lt;a href=&quot;http://mikehadlow.blogspot.co.il/2014/06/heisenberg-developers.html&quot;&gt;orginal blog&lt;/a&gt; post that inspired me to write this post and also check out &lt;a href=&quot;http://www.amazon.co.uk/gp/product/184767769X?keywords=drive&amp;amp;qid=1454768318&amp;amp;ref_=sr_1_3&amp;amp;sr=8-3&quot;&gt;the book Drive&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;twitter-share-button&quot; href=&quot;https://twitter.com/intent/tweet?text=&#39;Why autonomy is so important for individuals, teams and companies&#39; - http://davidboyne.co.uk/2016/02/06/automany-is-important.html by @boyney123&quot; data-size=&quot;large&quot;&gt;
Share on Twitter&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 12:55:30 +0000</pubDate>
        <link>http://yourdomain.com/2016/03/10/automany-is-important.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/10/automany-is-important.html</guid>
        
        
      </item>
    
      <item>
        <title>Agile is closer than you think</title>
        <description>&lt;p&gt;Throughout my working life I have had many different jobs … factory worker, coal miner and software engineer. Yet despite this apparent diversity I have come to realise that they all have something in common, me :) … but more specifically my desire to do the best I could at whatever it was that I was doing and take pride in my work. In the factories, I always strived to put more ‘handles on casserole dishes’ than the day before, by improving my technique, organising my equipment and putting plasters on my blisters! … when I worked in a meat factory, I challenged myself to beat my previous best time to haul 100 pork legs out of a 12 foot bath of cure with a 4 foot metal hook. When working down the pit, we pushed hard as a team to advance as far as we could by the end of the shift… making sure we left things ‘right’ for the shift following us on.&lt;/p&gt;

&lt;p&gt;Now, as a  software developer the challenges seem endless and ever-changing and I have devoted the last 25 years trying to quench my thirst for technology, working hard to deepen my understanding and trying to keep up… the desire that has driven me is a natural part of who I am… so now it gets interesting.&lt;/p&gt;

&lt;p&gt;Throughout these work experiences I have not been alone, in every place I have ever worked, I have worked shoulder to shoulder with others that have shared the same attitude, sense of pride and work ethic as me… and further in every place I have ever worked it has always been the guys/girls on the shop floor/the sharp end that really knew what was going on… where the problems were… how things could be improved and yet every time their voices were not heard… why? and what has this got to do with agile?&lt;/p&gt;

&lt;p&gt;After years of working in agile teams and wrestling with books and blogs, even doing my CSM, trying to understand what this seemingly mythical intangible ‘thing called agile’ was I have come to realise that… ‘I am agile’ … my spirit and attitude, values and principles are the embodiment of agile… as is yours and that of all the other hard-working motivated people I have shared my working life with.&lt;/p&gt;

&lt;p&gt;If you care about your work you are agile … if you want to work hard for your team you are agile … if you want to improve you are agile … if your highest priority is your customer guess what :) ?&lt;/p&gt;

&lt;p&gt;Agile is about culture, people who care and take pride in what they do, working together to do something awesome for someone else… its natural, selfless human behaviour, caring and sharing , learning and growing together… and when experienced is pure magic. When I think about those rare, special moments I have enjoyed as part of great ‘agile’ teams [Energy :)] and we got it over the line… that kind of magic.&lt;/p&gt;

&lt;p&gt;So please don’t get caught up in the dusty, tangled webs spun by countless weavers of confusion,terminology, rules  and process …  it mustn’t be allowed to obscure the agile light that shines in every one of us…  listen to your heart.&lt;/p&gt;

&lt;p&gt;In software development, agile is all about the team, they are the guys on the shop floor, they live and breathe the code… they feel the pain of flaky build servers… they know and love their products better than anyone… they are ones that know best.&lt;/p&gt;

&lt;p&gt;You are agile … and as an organisation, if you want to realise the true magic of agile (it’s also closer than you think!) … empower the team and they wont let you down :)&lt;/p&gt;

&lt;p&gt;I believe above all that ‘motivated individuals’ are at the heart of being agile… so if you care about the software you build, you’re off to great start.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 10:55:30 +0000</pubDate>
        <link>http://yourdomain.com/tech/2016/03/10/agile-is-closer-than-you-think.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/03/10/agile-is-closer-than-you-think.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Google Dorks</title>
        <description>&lt;p&gt;I wrote a presentation about Google Dorks a couple weeks ago in which I thought it would be great to share here. This presentation was written for learning purposes.&lt;/p&gt;

&lt;p&gt;Download presentation:
&lt;a href=&quot;/assets/downloads/Google_Dorks.key&quot;&gt;Google Dorks Presentation&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 08:55:30 +0000</pubDate>
        <link>http://yourdomain.com/tech/2016/03/10/zee-google-dorks.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/03/10/zee-google-dorks.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Lets talk Docker</title>
        <description>&lt;p&gt;I had a conversation the other day with some guys who manage the on-premise infrastructure and I mentioned we were using Docker. This produced a raft of questions like “What’s Docker?”, “What’s the point of Docker”?, “Isn’t that just what VM’s are?”, “What’s a Container?” etc etc.&lt;/p&gt;

&lt;p&gt;I had to hold back on diving into the technical benefits of Micro-services, Containerization, and Docker as I mentally recalled a similar conversation I had with a non-technical colleague who’s eyes quickly glazed over as I barreled headlong into described everything I know about this kind of stuff.&lt;/p&gt;

&lt;p&gt;I started with a quick sketch about the differences between deploying an application on a regular server to what that looks like if it’s
deployed in a container and how all this is different to what these guys see every day. I talked about it being open-source and described how quick it was to get started and deploy a basic “Hello World” app and see the results in a browser.&lt;/p&gt;

&lt;p&gt;This was great because they were bought in enough at this point to organize some time to see how it worked and deploy that “Hello World” app for themselves. What was really interesting was the spin off conversation it sparked about a whole bunch of other stuff that I really wasn’t expecting. Stuff like cost savings, standardization, utilization of resources and speed to deploy and the like. Wow! Half an hour ago these guys had no idea that Docker even existed!&lt;/p&gt;

&lt;p&gt;It’s that conversation that prompted me to write this post; I take it for granted that people know what Docker is because I live and breathe it everyday but that’s (obviously) not true for everyone.&lt;/p&gt;

&lt;p&gt;Ok, lets talk Docker. So the guys at Docker have kind of a mantra which is BUILD, SHIP, RUN. You can BUILD your application without worrying about stuff like environment, operating system or language. It lets you SHIP that application from the registry managing it through to distribution via a consistent UI and finally RUN and deploy that application at scale on whatever platform or provider you feel like. Cool right?&lt;/p&gt;

&lt;p&gt;But what is of real interest is that Docker allows you to concentrate on what you as a developer are good at i.e. writing great code, while it takes care of the infrastructure bit allowing you to use whatever platform suits you best to optimize infrastructure resources, standardize environments and at a stroke reduce that all important time to market thus increasing the ‘heartbeat’ of a tech company - i.e. how often it deploys new features to its customers.&lt;/p&gt;

&lt;p&gt;Docker enables users to run their containers wherever they please either in a Cloud or on-premise, so you’re not locked into a vendor or Cloud provider. You can deploy your containers to any Docker host on any infrastructure from Amazon, Google, or Azure to your datacenter servers or even your laptop!&lt;/p&gt;

&lt;p&gt;Standardization and Resource Consolidation are also a major advantages; easily setup, reproduce, manage, update and distribute new environments. With Docker you can run as many containers as your infrastructure can handle. Just package your application and all it’s dependencies into a single container and it removes all the usual inconsistencies between environments allowing you to run the same container in any environment. Docker also plays nicely with all the popular CI/CD pipelines which is great for productivity and efficient deployments.&lt;/p&gt;

&lt;p&gt;So whatever the problem is you’re trying to solve, large or small, Docker is a great way to spike out that mini project or deploy your enterprise web application. Google uses Docker extensively and spins up millions of containers a week.&lt;/p&gt;

&lt;p&gt;So like the guys I was talking to I hope this has sparked your interest to go find out more about Docker and Containerization. It’s a really cool way to get your application out there but it also has a bunch of added benefits that can help drive down your infrastructure &amp;amp; deployment costs, standardize your environments and reduce the time it takes to get those cool new features in front of your customers.&lt;/p&gt;

&lt;p&gt;Find out more at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;https://www.docker.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;https://docs.docker.com/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Mar 2016 22:29:44 +0000</pubDate>
        <link>http://yourdomain.com/tech/2016/03/09/sb-lets-talk-docker.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/03/09/sb-lets-talk-docker.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Building Peterborough.tech-community.co.uk</title>
        <description>&lt;p&gt;I recently moved my &lt;a href=&quot;http://www.davidboyne.co.uk&quot;&gt;own blog platform&lt;/a&gt; over to &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt; and &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and enjoyed the experience of learning new things along the way.&lt;/p&gt;

&lt;p&gt;I was learning about DNS registry’s, &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-virtual-hosts-server-blocks-on-ubuntu-12-04-lts--3&quot;&gt;how to host (multiple) websites on cheap digital ocean boxes&lt;/a&gt; and also how to quickly turn out cool static websites using ruby’s Jekyll platform. Also learnt a cool new method that allows me to host a &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps&quot;&gt;git server on the same box and allow me to push up changes straight to live within seconds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whilst I was doing this it got me thinking of another new side project…(one I can hopefully complete)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A community driven blog, free and open source.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;

&lt;p&gt;With what I have learnt, I know how to manage it all technically but there are a few main issues that are out of my control:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can I find people that would contribute?&lt;/li&gt;
  &lt;li&gt;Would people be interested?&lt;/li&gt;
  &lt;li&gt;Do people care?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the areas I will try to focus on within the next few months. How can I drive people to share, learn and grow within the local IT community?&lt;/p&gt;

&lt;h2 id=&quot;reaching-out-and-gaining-interest&quot;&gt;Reaching out and gaining interest&lt;/h2&gt;

&lt;p&gt;Every so often I run &lt;a href=&quot;http://www.meetup.com/Agile-Peterborough/&quot;&gt;IT events in Peterborough from speakers to workshops&lt;/a&gt;. Through this I have met a lot of experienced and interesting people that all live locally within the area.&lt;/p&gt;

&lt;p&gt;So I wondered if any of the people I know from work and hosting these events would be interesting in contributing to this open source project?&lt;/p&gt;

&lt;p&gt;I reached out to the community and got a good number of people that said they were interested and would help out!&lt;/p&gt;

&lt;p&gt;So hopefully this is just the &lt;strong&gt;start of this open source project&lt;/strong&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 14 Feb 2016 21:44:56 +0000</pubDate>
        <link>http://yourdomain.com/tech/2016/02/14/the-start.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/02/14/the-start.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Using NodeJS in Peterborough</title>
        <description>&lt;p&gt;I currently write a lot of NodeJS at Comparethemarket and wondered if there are any other local companies also using NodeJS?&lt;/p&gt;

&lt;p&gt;Maybe we could discuss some best practices or share ideas on how to build enterprise Node applications?&lt;/p&gt;

&lt;p&gt;If you could be interested start the discuss conversation below.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Feb 2016 21:44:56 +0000</pubDate>
        <link>http://yourdomain.com/tech/2016/02/12/using-node.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/02/12/using-node.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
  </channel>
</rss>
